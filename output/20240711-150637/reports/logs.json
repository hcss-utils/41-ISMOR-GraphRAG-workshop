{"type": "error", "data": "Error Invoking LLM", "stack": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/base_llm.py\", line 53, in _invoke\n    output = await self._execute_llm(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/openai/openai_embeddings_llm.py\", line 36, in _execute_llm\n    embedding = await self.client.embeddings.create(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/resources/embeddings.py\", line 215, in create\n    return await self._post(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1826, in post\n    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1519, in request\n    return await self._request(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1620, in _request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.NotFoundError: 404 page not found\n", "source": "404 page not found", "details": {"input": ["\"HEZBOLLAH\":Hezbollah is a militant group with ties to North Korea, from which it may learn about hybrid warfare tactics.  During the Second Lebanon War in 2006, Hezbollah engaged in conflict with Israel and employed hybrid warfare strategies against them. This campaign serves as a potential example for North Korea, highlighting Hezbollah's successful application of these tactics. \n\n\n", "\"RUSSIA\":Russia is a nation-state that has used hybrid warfare tactics, such as those employed in Ukraine in 2014, to achieve political goals.  This makes Russia a potential adversary that the Multi-Domain Operations (MDO) seeks to deter and defeat.  North Korea has ties to Russia and may be learning about hybrid warfare from them.  \n", "\"MULTI-DOMAIN OPERATIONS (MDO)\":\"MDO is the US Army's future war concept, aiming to deter and defeat adversaries like Russia, China, Iran, and North Korea.\"", "\"REPUBLIC OF KOREA MILITARY (ROK MILITARY)\":\"The ROK military is the subject of the thesis, examining the viability of MDO in countering North Korean hybrid warfare.\"", "\"CHINA\":\"China is mentioned as a potential adversary that MDO seeks to deter and defeat.\"", "\"IRAN\":\"Iran is mentioned as a potential adversary that MDO seeks to deter and defeat.\"", "\"NORTH KOREA\":North Korea is a nation that employs hybrid warfare as its primary military strategy.  The country is considered a potential adversary by the Multi-Domain Operations (MDO) initiative, which aims to deter and defeat North Korean aggression through countermeasures against hybrid warfare tactics. Historically, North Korea was under Soviet trusteeship following World War II and received significant support from the Soviet Union during the Korean War. \n\n\n", "\"ROK MILITARY\":\"The ROK military is the focus of the thesis, examining the viability of MDO for countering North Korean threats.\"", "\"US ARMY\":\"The US Army is mentioned as the originator of the MDO concept.\"", "\"EUNJU LEE\":Eunju Lee is the wife of the author and provided significant support during his thesis writing process. She is acknowledged as a source of support by the author. \n\n\n", "\"ROK\":ROK (Republic of Korea) is a nation that faces challenges in preparing for future conflicts, particularly those involving evolving North Korean hybrid warfare tactics.  To address these threats, ROK is actively pursuing integrated operations across multiple domains. \n", "\"JOSEPH DONALBAIN\":\"Joseph Donalbain is a member of the author's thesis committee, providing advice on the structure and logic of the thesis.\"", "\"JOHN MODINGER\":\"John Modinger is a member of the author's thesis committee, offering guidance on the thesis.\"", "\"LTC MICHAEL THORPE\":\"LTC Michael Thorpe is a member of the author's thesis committee, contributing to the thesis's direction.\"", "\"DEAN NOWOWIEJSKI\":\"Dean Nowowiejski is the Ike Skelton Chair at CGSC and guided Art of War scholars in providing insights for the thesis.\"", "\"ISRAEL\":Israel is a nation-state that launched an attack into Lebanese territory in 2006. This attack, known as the Second Lebanon War, resulted in significant conflict between Israel and Hezbollah forces.  \n"]}}
{"type": "error", "data": "Error executing verb \"text_embed\" in create_final_entities: 404 page not found", "stack": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/text_embed.py\", line 105, in text_embed\n    return await _text_embed_in_memory(\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/text_embed.py\", line 130, in _text_embed_in_memory\n    result = await strategy_exec(texts, callbacks, cache, strategy_args)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/strategies/openai.py\", line 61, in run\n    embeddings = await _execute(llm, text_batches, ticker, semaphore)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/strategies/openai.py\", line 105, in _execute\n    results = await asyncio.gather(*futures)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/strategies/openai.py\", line 99, in embed\n    chunk_embeddings = await llm(chunk)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/caching_llm.py\", line 104, in __call__\n    result = await self._delegate(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 177, in __call__\n    result, start = await execute_with_retry()\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 159, in execute_with_retry\n    async for attempt in retryer:\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/asyncio/__init__.py\", line 166, in __anext__\n    do = await self.iter(retry_state=self._retry_state)\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/asyncio/__init__.py\", line 153, in iter\n    result = await action(retry_state)\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/_utils.py\", line 99, in inner\n    return call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/__init__.py\", line 398, in <lambda>\n    self._add_action_func(lambda rs: rs.outcome.result())\n  File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 451, in result\n    return self.__get_result()\n  File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 403, in __get_result\n    raise self._exception\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 165, in execute_with_retry\n    return await do_attempt(), start\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 147, in do_attempt\n    return await self._delegate(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/base_llm.py\", line 49, in __call__\n    return await self._invoke(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/base_llm.py\", line 53, in _invoke\n    output = await self._execute_llm(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/openai/openai_embeddings_llm.py\", line 36, in _execute_llm\n    embedding = await self.client.embeddings.create(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/resources/embeddings.py\", line 215, in create\n    return await self._post(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1826, in post\n    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1519, in request\n    return await self._request(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1620, in _request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.NotFoundError: 404 page not found\n", "source": "404 page not found", "details": null}
{"type": "error", "data": "Error running pipeline!", "stack": "Traceback (most recent call last):\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/run.py\", line 323, in run_pipeline\n    result = await workflow.run(context, callbacks)\n  File \"/usr/local/lib/python3.10/dist-packages/datashaper/workflow/workflow.py\", line 369, in run\n    timing = await self._execute_verb(node, context, callbacks)\n  File \"/usr/local/lib/python3.10/dist-packages/datashaper/workflow/workflow.py\", line 415, in _execute_verb\n    result = await result\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/text_embed.py\", line 105, in text_embed\n    return await _text_embed_in_memory(\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/text_embed.py\", line 130, in _text_embed_in_memory\n    result = await strategy_exec(texts, callbacks, cache, strategy_args)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/strategies/openai.py\", line 61, in run\n    embeddings = await _execute(llm, text_batches, ticker, semaphore)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/strategies/openai.py\", line 105, in _execute\n    results = await asyncio.gather(*futures)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/index/verbs/text/embed/strategies/openai.py\", line 99, in embed\n    chunk_embeddings = await llm(chunk)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/caching_llm.py\", line 104, in __call__\n    result = await self._delegate(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 177, in __call__\n    result, start = await execute_with_retry()\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 159, in execute_with_retry\n    async for attempt in retryer:\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/asyncio/__init__.py\", line 166, in __anext__\n    do = await self.iter(retry_state=self._retry_state)\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/asyncio/__init__.py\", line 153, in iter\n    result = await action(retry_state)\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/_utils.py\", line 99, in inner\n    return call(*args, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/tenacity/__init__.py\", line 398, in <lambda>\n    self._add_action_func(lambda rs: rs.outcome.result())\n  File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 451, in result\n    return self.__get_result()\n  File \"/usr/lib/python3.10/concurrent/futures/_base.py\", line 403, in __get_result\n    raise self._exception\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 165, in execute_with_retry\n    return await do_attempt(), start\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/rate_limiting_llm.py\", line 147, in do_attempt\n    return await self._delegate(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/base_llm.py\", line 49, in __call__\n    return await self._invoke(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/base/base_llm.py\", line 53, in _invoke\n    output = await self._execute_llm(input, **kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/graphrag/llm/openai/openai_embeddings_llm.py\", line 36, in _execute_llm\n    embedding = await self.client.embeddings.create(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/resources/embeddings.py\", line 215, in create\n    return await self._post(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1826, in post\n    return await self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1519, in request\n    return await self._request(\n  File \"/usr/local/lib/python3.10/dist-packages/openai/_base_client.py\", line 1620, in _request\n    raise self._make_status_error_from_response(err.response) from None\nopenai.NotFoundError: 404 page not found\n", "source": "404 page not found", "details": null}
